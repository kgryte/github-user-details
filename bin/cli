#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var get = require( './../lib' );


// VARIABLES //

var token;
var args;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 0 );
}


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.version );
	return;
}


// OPTIONS //

opts = {};

opts.usernames = args._;
if ( args.useragent ) {
	opts.useragent = args.useragent;
}
if ( args.token ) {
	token = args.token;
}
else if ( process.env.GITHUB_TOKEN ) {
	token = process.env.GITHUB_TOKEN;
}
if ( token ) {
	opts.token = token;
}


// GET USER DETAILS //

get( opts, clbk );

/**
* FUNCTION: clbk( error, results, info )
*	Callback invoked upon receiving a request response.
*
* @private
* @param {Error|Null} error - error object
* @param {Object} results - results
* @param {Object} info - rate limit info
* @returns {Void}
*/
function clbk( error, results, info ) {
	var len;
	if ( info ) {
		process.stderr.write( JSON.stringify( info ), 'utf8' );
		process.stderr.write( '\n', 'utf8' );
	}
	if ( error ) {
		process.stderr.write( error.message, 'utf8' );
		process.stderr.write( '\n' );
		return process.exit( 1 );
	}
	len = Object.keys( results.data ).length;
	if ( len ) {
		process.stdout.write( JSON.stringify( results.data ), 'utf8' );
		process.stdout.write( '\n', 'utf8' );
	}
	len = Object.keys( results.failures ).length;
	if ( len ) {
		process.stderr.write( JSON.stringify( results.failures ), 'utf8' );
		process.stderr.write( '\n', 'utf8' );
	}
	process.exit( 0 );
} // end FUNCTION clbk()
